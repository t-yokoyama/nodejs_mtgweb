doctype html
html

  head

    title 1v1 Game

    link(href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css", rel="stylesheet")
    link(href="stylesheets/gameplay.css", rel="stylesheet")

    script(src="https://cdn.socket.io/socket.io-1.2.0.js")
    script(src='https://code.jquery.com/jquery-1.9.1.min.js')
    script(src="https://code.jquery.com/ui/1.11.4/jquery-ui.js")

    script(src="javascripts/bootstrap-contextmenu.js")
    script(src="javascripts/gameplay.js")

    script.

      $(document).ready(function() {

        // FIXME move all this into gameplay.js ?
        
        initGlobals();
        
        var client_io = io('/game1v1');
        window.g_client_io = client_io;

        client_io.on('connect', function(data) {

          // extract the room id from the url and join that room
          var params = {};
          if (location.search) {
            var parts = location.search.substring(1).split('&');
            for (var i = 0; i < parts.length; i++) {
              var nv = parts[i].split('=');
              if (!nv[0]) continue;
              params[nv[0]] = nv[1] || true;
            }
          }
          
          // FIXME add error checking for room id is not found
          // FIXME debugging line: alert(params.room);
          client_io.emit('join_room', { userid: '#{user.id}',
                                        roomid: params.room });
        });
        
        client_io.on('duplicate_user_connect', function() {
          alert('You have entered the room in a separate window, disconnecting this instance.');
          
          // FIXME test to make sure this actually severs the socket connection
          client_io.disconnect();
        });

        client_io.on('initialize_gamestate', function(data) {
        
          // iterate over all the cards in the gamestate array, assigning card ownership based on data.role
          for (var i = 0; i < data.gamestate.cards.length; i++) {
            var card = data.gamestate.cards[i];
            var is_owner = (data.role === card.owner);
            generateCard(is_owner, card.imageurl, card.x, card.y, card.faceDown, card.tapped, card.flipped, card.transformed, card.counters);
          }

          // move each player's cards to various zones depending on the zone array contents
          for (var playerIndex = 0; playerIndex <= 1; playerIndex++) {

            for (var i = 0; i < data.gamestate.zones[playerIndex].hand.length; i++) {
             var cid = data.gamestate.zones[playerIndex].hand[i];
             moveCardToZone(cid, ZoneEnum.HAND, false, false);
            }
  
            for (var i = 0; i < data.gamestate.zones[playerIndex].library.length; i++) {
              var cid = data.gamestate.zones[playerIndex].library[i];
              moveCardToZone(cid, ZoneEnum.LIBRARY, false, false);
            }
  
            for (var i = 0; i < data.gamestate.zones[playerIndex].graveyard.length; i++) {
              var cid = data.gamestate.zones[playerIndex].graveyard[i];
              moveCardToZone(cid, ZoneEnum.GRAVEYARD, false, false);
            }
  
            for (var i = 0; i < data.gamestate.zones[playerIndex].exile.length; i++) {
              var cid = data.gamestate.zones[playerIndex].exile[i];
              var faceDown = !g_directory[cid].faceUp;
              moveCardToZone(cid, ZoneEnum.EXILE, faceDown, false);
            }
          }

          enableInteractivity();

        });
        
        client_io.on('card_moved', function(data) {

          moveCardToZone(data.cid, data.toZone, data.faceDown, false);

          // FIXME set x,y coords
          //$("#h" + data.cid).position({
          //  of: $("#h" + data.cid).parent(),
          //  my: 'left top',
          //  at: 'left top',
          //  offset: data.x + ' ' + data.y
          //});

        });
        
      });


  body

    div(id="window")
      div(id="battlefield_wrapper")
        div(class="battlefield", id="opp_battlefield") opp_battlefield
          div(class="zone", id="opp_hand") opp_hand
          div(class="opp_zone", id="opp_library") opp_library
          div(class="opp_zone", id="opp_graveyard") opp_graveyard
          div(class="opp_zone", id="opp_exile") opp_exile
        div(class="battlefield", id="my_battlefield") my_battlefield
          div(class="zone", id="library") library
          div(class="zone", id="graveyard") graveyard
          div(class="zone", id="exile") exile
          div(class="zone", id="hand") hand

    div(id="rcmenu_forcards")
      ul(class="dropdown-menu", role="menu")
        li: a(tabindex="-1") Action
        li: a(tabindex="-1") Another action
        li: a(tabindex="-1") Something else here
        li(class="divider")
        li: a(tabindex="-1") Separated link

