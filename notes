HOWTO
 - make express scaffolding for a simple web app:
   1) npm install -g express-generator (only needed once per nodejs installation)
   2) express nodetest1



TODO

 x 1 learn nodejs/express server framework
 x 2 learn socketio for sending events between browsers
 x 3 learn canvas for drawing magic cards
   x figure out how to embed local image into nodejs served file
     (this seems to only work with absolute file paths)
 x 4 learn how to drag an image and persist its location
   - http://jqueryui.com/draggable/
   - http://jsfiddle.net/g6m5t8co/1/
 x find out how to get x/y pos of a card after it's been dragged
   - http://jsfiddle.net/davidThomas/DGbT3/3/
 x use canvas instead of div (what about svg?)
   - http://stackoverflow.com/questions/5882716/html5-canvas-vs-svg-vs-div
 x figure out how to set the x/y pos of a card via button/action
   - http://api.jquery.com/offset/ (.offset(x, y);)
 x figure out how to set draggable/offset without manually naming specific id
 x use GIT
 x figure out how to split the remaining height with percentages after a fixed width object
   - http://jsfiddle.net/CZt36/15/
 x figure out why re-setting an img's .src doesn't work
 x see about holding shift to move cards face down to battlefield/exile
   - http://jsbin.com/redamohoji/edit?html,js,output
 x implement moveCardToZone()
 x make it highlight the zone when a card is dragged over it such that it will be successfully dropped.
 x implement refreshX functions
 x lighten the color of exiled cards
   - http://stackoverflow.com/questions/9057471/brighten-images-from-dark-to-light-on-hover
 x figure out an elegant solution to the z-index problem
   x update the refreshX functions to also show the second from top card, and set the z-index for the top two appropriately
   x bring the mouse focus card to the top
 x set drag limit to end of page
 x mouse hover selection? (outline with color)
 x figure out how to do a right-click menu
   x keep selected card at max z-index while right click menu is engaged
 x implement click to tap:
   - http://stackoverflow.com/questions/20061774/rotate-an-image-in-image-source-in-html
   - http://www.the-art-of-web.com/css/css-animation/
 x fix the x/y weirdness with dragging a rotated image
   - http://jsfiddle.net/bCUVp/1/
 x store a handle to each card element in g_directory to avoid "#" + ID string slowness
 x replace == with ===
   - http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javas cript-comparisons
 x set up a dummy card database in postgres
   x think of a good schema for managing decks
 x test pg code to make sure it can connect to the dummy db and extract data
   - http://expressjs.com/en/guide/database-integration.html#postgres
 x rearchitect site with express-generator
   - http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/
   - http://jilles.me/getting-the-express-app-js/
 x figure out how to pass database results to a webpage efficiently
 x implement sessions/cookies for users
   - http://code.tutsplus.com/tutorials/authenticating-nodejs-applications-with-passport--cms-21619
   - https://scotch.io/tutorials/easy-node-authentication-setup-and-local
 x figure out how to display username on profile
 x figure out how to replace mongodb with postgres in logindemo
 x write a python script to generate card insert queries and crawl for image files
 x make an internal database of cards (id, image...)
 x implement a lobby
   x chat window, userlist, challenge panel, 'challenge received' panel
   x show username per connected user
   x figure out how to get two users into the same room with their specified decks
     1. server: create a local card array for both players with status (position, tap, flip, etc.)
     2. client: enter game room, request card data by userid, roomid
     3. server: based on userid, provided, return full set of both decks to client
     4. client: receive card data via socket.io event, call generateCard repeatedly
     5. client: when user moves cards, send move event to server via socket.io event
     6. server: receive move event, propogate to all clients, transforming position based on perspective
 x add server-side data structures for representing/remembering cards and their order in each game zone
 x when a second instance of the same user connects to a game room, server-side force disconnect the old one
 x make generateCard accept a boolean for if the card is controllable or nothing (client-side)
 x make generateCard display cards upside-down if they are not our cards
 x in the initialize_gamestate event client-side, iterate over all the cards and call generateCard on them as appropriate
 x make the global zone arrays (g_library, etc) double-indexed [2] to represent both our and our opponent's zones
 x modify moveCardToZone() to accept a boolean parameter representing a card's ownership
 x reimplement right click menu
 x send card status change across socket (tap, counters, flip, transform, etc)
 x right menu: conditonally change labels based on card state
 x implement card counters
 x add info zone to the left


6/4/17:
 - implement buttons:
   - untap all
   - shuffle library
   - draw card
   - peek
   - flip coin
   - search library
   - make token/emblem
 - implement system messages in game chat
   x advance phase
   x life change
   x poison change
   - card change zone
   - card change state
   - card tap
 - deck builder page


 MAJOR TODO ITEMS
 - make the login page only accessible if no user is logged in, show the profile/dashboard page instead if user is logged in
 - implement a heartbeat check on socket pages to redirect when server goes down
 - disconnect socket when passport logout detected
   - https://github.com/jfromaniello/passport.socketio
   - http://stackoverflow.com/questions/19106861/authorizing-and-handshaking-with-socket-io
   - http://stackoverflow.com/questions/13095418/how-to-use-passport-with-express-and-socket-io
 - make the 'game session' GUI on the client side pretty
 - modify the game1v1 interface to accommodate the third party observer role (not player nor opponent)


 GAMEPLAY TODO
 - randomly determine starting player
 - fix the z-index (it was broken during the port from a single html file to jade/js/css)
   - invert the z-index calculation for opponent's cards
 - implement sidebar (card blowup, chat window, turn phase, life totals, etc.)
 - figure out how to conditionally gray out certain rcmenu items
 - keyboard shortcuts for moveToXZone?
 - implement token generation
 - prevent card borders from getting grayscaled by filters


 MISC TODO
 - make global vars not trigger warning in gameplay.js
 - right menu icons
 - implement wallpapers (how do we elegantly flip a background?)
 - research reasons to use jquery selector $("#blah") vs document.querySelector("#blah")
   - https://jsperf.com/jquery-vs-document-queryselector
 - split code into separate css/js/html files
 - replace .attr() with .prop() throughout the code
 - upload the 'correct' version of back.jpg to cloud9
 - change the gameid to an unguessable string?
 - prefix all function input parameters named p_, globals with g_
 - change variable names to camelCase of snake_case but be consistent
 - fix all the == vs === inconsistencies (prefer ===, which compares types instead of interpreting)



