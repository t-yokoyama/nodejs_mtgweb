HOWTO
 - make express scaffolding for a simple web app:
   1) npm install -g express-generator (only needed once per nodejs installation)
   2) express nodetest1



TODO

 x 1 learn nodejs/express server framework
 x 2 learn socketio for sending events between browsers
 x 3 learn canvas for drawing magic cards
   x figure out how to embed local image into nodejs served file
     (this seems to only work with absolute file paths)
 x 4 learn how to drag an image and persist its location
   - http://jqueryui.com/draggable/
   - http://jsfiddle.net/g6m5t8co/1/
 x find out how to get x/y pos of a card after it's been dragged
   - http://jsfiddle.net/davidThomas/DGbT3/3/
 x use canvas instead of div (what about svg?)
   - http://stackoverflow.com/questions/5882716/html5-canvas-vs-svg-vs-div
 x figure out how to set the x/y pos of a card via button/action
   - http://api.jquery.com/offset/ (.offset(x, y);)
 x figure out how to set draggable/offset without manually naming specific id
 x use GIT
 x figure out how to split the remaining height with percentages after a fixed width object
   - http://jsfiddle.net/CZt36/15/
 x figure out why re-setting an img's .src doesn't work
 x see about holding shift to move cards face down to battlefield/exile
   - http://jsbin.com/redamohoji/edit?html,js,output
 x implement moveCardToZone()
 x make it highlight the zone when a card is dragged over it such that it will be successfully dropped.
 x implement refreshX functions
 x lighten the color of exiled cards
   - http://stackoverflow.com/questions/9057471/brighten-images-from-dark-to-light-on-hover
 x figure out an elegant solution to the z-index problem
   x update the refreshX functions to also show the second from top card, and set the z-index for the top two appropriately
   x bring the mouse focus card to the top
 x set drag limit to end of page
 x mouse hover selection? (outline with color)
 x figure out how to do a right-click menu
   x keep selected card at max z-index while right click menu is engaged
 x implement click to tap:
   - http://stackoverflow.com/questions/20061774/rotate-an-image-in-image-source-in-html
   - http://www.the-art-of-web.com/css/css-animation/
 x fix the x/y weirdness with dragging a rotated image
   - http://jsfiddle.net/bCUVp/1/
 x store a handle to each card element in g_directory to avoid "#" + ID string slowness
 x replace == with ===
   - http://stackoverflow.com/questions/359494/does-it-matter-which-equals-operator-vs-i-use-in-javas cript-comparisons
 x set up a dummy card database in postgres
   x think of a good schema for managing decks
 x test pg code to make sure it can connect to the dummy db and extract data
   - http://expressjs.com/en/guide/database-integration.html#postgres
 x rearchitect site with express-generator
   - http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/
   - http://jilles.me/getting-the-express-app-js/
 x figure out how to pass database results to a webpage efficiently
 x implement sessions/cookies for users
   - http://code.tutsplus.com/tutorials/authenticating-nodejs-applications-with-passport--cms-21619
   - https://scotch.io/tutorials/easy-node-authentication-setup-and-local
 x figure out how to display username on profile
 x figure out how to replace mongodb with postgres in logindemo

 - implement a lobby
   - chat window, userlist, challenge panel, 'challenge received' panel
   - show username per connected user
   - figure out how to get two users into the same room with their specified decks
     - maybe create a state machine with socket.io where
       1) user A chooses a deck/opponent (user B), sends duel request (goes into waiting mode)
       2) user B receives a notification in a 'challenge received' popup
       3) user B selects deck, sends accept (opens gameplay.html with both deck IDs)
       4) user A receives accept (opens gameplay.html with both deck IDs)
   - disconnect socket when passport logout detected
     - https://github.com/jfromaniello/passport.socketio
     - http://stackoverflow.com/questions/19106861/authorizing-and-handshaking-with-socket-io
     - http://stackoverflow.com/questions/13095418/how-to-use-passport-with-express-and-socket-io



 - write a python script:

      accept command line param for db inserts and/or images
      open json file
      read contents and store each card into a data structure with all fields
        ignore everything except
          set
            name
          card
            layout
            name
            manacost
            cmc
            colors
            types
            subtypes
            rarity
            text
            flavor
            number
            power
            toughness
            multiverseid
      generate a lookup table for set name => 3 digit set id (only the sets we want)
      for each parsed card line
         if set id is in the wanted list
            generate 6 digit uid with set id num + card num
            if db insert option enabled
               write out insert statement to file
            if image extract option enabled  
               go to gatherer page (by multiverse id)
               save image file to uid.jpg (use my blackbird script)




 - fix the z-index (it was broken during the port from a single html file to jade/js/css)
 - implement sidebar (card blowup, chat window, turn phase, life totals, etc.)
 - buttons: shuffle library, restart game, mulligan, make token/emblem, get card, flip coin, roll die
 - figure out how to conditionally gray out certain rcmenu items
 - implement rcmenu actions
 - keyboard shortcuts for moveToXZone?
 - implement token generation

 - prevent card borders from getting grayscaled by filters
 - implement wallpapers (how do we elegantly flip a background?)
 - research reasons to use jquery selector $("#blah") vs document.querySelector("#blah")
   - https://jsperf.com/jquery-vs-document-queryselector
 - split code into separate css/js/html files


 - ? make an internal database of cards (id, image...)
 - ? decide how to animate transitions from opponent

